Chapter 3. JAX-RS Application, Resources and Sub-Resources

根资源类，普通的java类使用@Path注解标注，且至少有一个方法也使用@Path注解标注或使用@GET, @PUT, @POST, @DELETE注解标注。
使用@GET, @PUT, @POST, @DELETE注解标注的方法称为资源方法
资源方法的参数类型，基本类型，带有一个只接收一个字符串的构造函数的类型，有一个名为valueOf或fromString的且只接收一个字符串的静态方法类型，
可以使用javax.ws.rs.ext.ParamConverter转换的java类型，List<T>、Set<T>或SortedSet<T>且泛型T满足前面第二个和第三个的集合类型，该集合类型是只读的

子资源，@Path注解也可以用在根资源类的方法上，这样可以把一些资源打包在一起，可以进行潜在的重用
第一种方式，@Path注解可以用在资源方法上（和@GET, @PUT, @POST, @DELETE一起使用），这些方法称为子资源方法。
类上的@Path注解和方法上的@Path注解合起来参与路径匹配
第二种方式，@Path注解可以用在非资源方法上（不和@GET, @PUT, @POST, @DELETE一起使用），这些方法称为子资源定位器。
类上的@Path注解和方法上的@Path注解合起来参与路径匹配，当方法上的@Path注解是@Path("/")或@Path("")时，意味着子资源定位器可以匹配到类上的资源路径。
子资源定位器返回的资源类实例是在运行时执行的，因此可以支持多态行为，根据请求返回资源类的不同的子类型。因为返回的是资源类的实例对象，
所以运行时无法管理它的生命周期和字段注入。如果要让运行时管理这些，子资源定位器方法不能返回实例而应返回资源类的Class<?>。
默认资源类的生命周期是每个请求范围的，可以在资源类上使用@javax.inject.Singleton注解变成单例。子资源定位器方法也可以返回一个编程的资源模型（Chapter 14）

根资源类的生命周期，@org.glassfish.jersey.process.internal.RequestScoped请求范围，@org.glassfish.hk2.api.PerLookup每次需要（一个请求范围内可能多次），
@javax.inject.Singleton单例。默认是请求范围

Chapter 4. Application Deployment and Runtime Environments

支持多种不同的服务器端环境，从轻量级的http容器到完全的java ee服务器，应用的发布方式取决于服务器端运行环境
JAX-RS提供了一个不需要知道部署的抽象类Application可以声明资源类和provider类，资源类和provider类的单例实例。
可选地也可以使用jersey的ResourceConfig类（它继承了Application），可以直接实例化和配置，也可以继承它，在构造函数里放置配置代码。
可以手动注册资源类或通过包扫描自动添加，包扫描不支持继承，因此@Path注解放到父类或接口上会被忽略，应放到具体类上

自动发现的Feature，默认classpath上的feature不会自动隐式的被发现和注册，必须显式使用Application的子类注册。只有很少的几个jersey模块提供了自动发现注册功能

配置类路径扫描，jersey采用Java Service Provider的机制来获取服务的实现类，它会扫描全部类路径来找到合适的META-INF/services/文件。由于扫描会增加启动时间，
也可以禁用扫描而采用Application子类代码手动注册所有的服务实现类。具体做法可以使用ResourceConfig类的实例注册或继承该类并在构造函数中注册

java se部署环境，基于java的http服务器，极简化和灵活的jersey部署，通常可以嵌入到其它应用里，通过代码启动和配置。
支持JDK Http Server，Grizzly HTTP Server，Simple server，Jetty HTTP Server，Netty HTTP Server，

基于Servlet 2.5的部署环境，jersey和servlet容器集成，可以在web.xml文件中以servlet或filter的方式配置和设置它所拦截的路径模式，关于资源类的配置有三种方式，
1)以javax.ws.rs.Application为参数名配置一个Application子类（该子类里注册了资源类）
2)以jersey.config.server.provider.packages为参数名配置多个资源类所在包（逗号分隔），
以jersey.config.server.provider.scanning.recursive为参数名配置是否递归扫描
3)以jersey.config.server.provider.classnames为参数名配置多个资源类完整名称（逗号分隔）

Servlet 3.x容器，简单的部署可以不使用web.xml文件，使用@ApplicationPath注解在Application的子类上，指定应用的基路径。复杂的部署可以使用web.xml，
如果定义了Application子类，则用该子类全名作为servlet-name配置url映射，如果没有子类，则用javax.ws.rs.core.Application作为servlet-name配置url映射
（此时通过扫描类路径来发现注册资源类和provider类）。此时只配置映射而没有配置servlet，因为jersey会自己添加servlet的配置

Chapter 7. Representations and Responses

展现和java类型，一个request的body部分也叫做展现或实体。带有注解的方法参数是从请求中抽取参数，不带注解的方法参数是一个实体。
最多只能有一个这样不带注解的方法参数存在，因为一个request中最多发送一个这样的展现或实体

构建响应，有时需要为一个请求提供额外的响应信息，这时请使用Response类来构建和返回

java异常到http错误响应的映射，可以抛出一个继承了WebApplicationException的异常，异常信息会直接转化为http相对应的错误响应。
也可以使用一个异常映射ExceptionMapper<E extends Throwable>，把一个已经存在的异常映射到一个特定的http错误响应。
自定义异常映射可以实现org.glassfish.jersey.spi.ExtendedExceptionMapper接口，包含一个检测方法来确定是否可以映射某个异常，不能映射的话就让其它实现类来映射

有条件的GET，可以减少带宽和提高服务器端性能，取决于如何根据信息计算条件是否改变，一般对于许多静态资源应返回304（没有修改）这样的响应

Chapter 8. JAX-RS Entity Providers

jersey根据输入展现信息，可以把输入数据反序列化为java类型的对象供资源方法使用。同样，由资源方法返回的java类型的对象，jersey根据输出展现信息，
可以把该对象序列化，然后写入输出流。jersey只能完成非常普通的java类型转换，MessageBodyReader<T>接口可以完成输入实体展现到java类型对象的反序列化，
MessageBodyWriter<T>接口可以完成java类型对象到输出实体展现的序列化

如果支持给定的java类型则isWriteable方法返回true，判断基于java类型，泛型类型，还有类型上带的注解，展现媒体类型，这里的注解和资源方法关联和或java类型关联。
writeTo方法的参数和上一个方法的含义一样，除此之外还有和输出相关的 httpHeaders，且可以修改，还有一个java类型的对象表示实体对象，还有一个输出流用于写入，
注意不要关闭输出流，jersey会帮我们关闭，getSize方法已废弃

isReadable方法对于支持的java类型应该返回true，注解和资源方法里的java类型的参数关联，而不是和该java类型关联，
readFrom方法从输入流读取数据转化为java类型对象，输入流不要关闭，jersey会帮我们关闭

通常会注册很多Entity Provider，根据java类型和线上的媒体类型选出若干候选项，然后调用它们的isReadable或isWriteable方法，第一个返回true就被选择

MessageBodyWriter<T>选择算法，首先找出java类型，然后找出媒体类型，然后筛选出支持它们的候选项，然后按照java类型第一媒体类型第二的方式排序，
然后再调用方法检测是否返回true

MessageBodyReader<T>选择算法，首先找出媒体类型，如果从请求中无法得知则算作是application/octet-stream，然后确定java类型，
服务器端就是资源方法的java类型参数的类型，客户端的话就是传递给readFrom方法的Class<?>，然后按照媒体类型筛选出候选项，然后再调用方法检测是否返回true

为了简化使用，jersey定了MessageBodyWorkers接口，可以通过@Context注解来注入该接口，该接口可以选择最合适的entity provider来使用

Chapter 10. Filters and Interceptors

过滤器和拦截器可用在服务器端和客户端。过滤器可以修改输入输出请求和响应，包括header，entity和其它参数。
拦截器主要用来修改实体输入输出流，例如压缩或解压缩输入输出实体流

ContainerResponseFilter接口，必须注册为provider，一般情况下在资源方法执行后执行，如果资源方法没有找到的话也会执行，filter方法有两个参数，
ContainerRequestContext现在只能读了，因为已经到了响应阶段，ContainerResponseContext可以进行修改

ContainerRequestFilter接口，在资源方法执行前和响应创建前执行，filter方法的ContainerRequestContext参数可以用来操作请求参数，
header，实体。abortWith方法用来中止请求，表明不需要按常规流程进行进一步处理了。传递给该方法的Response类型参数将作为请求的响应，
如果有注册的ContainerResponseFilter，此时将会执行

所有的过滤器默认是匹配后过滤器，即在合适的资源方法被选出来后再应用过滤器，所以不会影响资源方法的选择。可以使用@PreMatching注解把过滤器标记为匹配前过滤器，
在请求匹配之前就会被执行，会影响资源方法的选择。匹配前过滤器可以完全修改请求信息，匹配后过滤器不能修改请求信息，会抛异常

客户端过滤器和服务器端相似，ClientRequestFilter可以用来中止请求，此时不会有请求发送到服务器端，传递给abortWith方法的Response类型参数将作为响应，
然后会调用客户端的ClientResponseFilter，与服务器端相似。所有从客户端发出的请求都会经过ClientRequestFilter，可以操作请求，
从服务器端回来的响应经过ClientResponseFilter，可以操作响应

拦截器在客户端和服务器端共享通用API，被设计用来操作实体，通过实体输入输出流，例如用来编码请求实体body，
ReaderInterceptor可以在服务器端读取请求实体流和在客户端读取响应实体流，WriterInterceptor可以在服务器端写入响应实体流和在客户端写入请求实体流。
ReaderInterceptor和WriterInterceptor在MessageBodyReader<T>和MessageBodyWriter<T>之前执行，主要目的是包装实体流用于后两者

拦截器用来包装实体流，它们自己就像包装器，每一个拦截器是另一个拦截器的包装器，每一个拦截器的实现有责任去调用被包装的拦截器，
通过调用proceed方法来实现对链中下一个拦截器的调用，最后一个是对MessageBodyReader<T>和MessageBodyWriter<T>的调用，就像过滤器和servlet的关系，
当没有实体时拦截器可能不会执行，拦截器主要用来处理实体序列化和反序列化的，proceed方法必须返回一个实体，所有的拦截器都可以修改这个实体

过滤器和拦截器执行顺序，拦截器同时在服务器端和客户端注册，来对实体流进行压缩相关处理，过滤器同时在服务器端和客户端注册，来对请求和响应的header进行处理

1)客户端发起POST请求，带着实体2)客户端ClientRequestFilter执行，操作请求header3)客户端WriterInterceptor执行，因为请求包含实体，对实体输出流进行压缩包装
4)客户端MessageBodyWriter执行，把实体序列化到压缩流，然后把流发送到线上
5)服务器收到一个请求，且实体数据已被压缩过6)服务器端匹配前ContainerRequestFilter执行，操作资源方法的匹配处理
7)资源方法匹配完成8)匹配后ContainerRequestFilter执行，包括没有绑定的全局过滤器和已绑定到匹配方法的绑定过滤器
9)服务器端ReaderInterceptor执行，把输入实体流用解压缩包装10)服务器端MessageBodyReader执行，从解压缩的输入实体流中反序列化出java类型对象
11)资源方法执行，反序列化出来的java对象当作参数传入，把该对象当作响应实体返回
12)服务器端ContainerResponseFilter执行，包括所有未绑定的全局过滤器和所有绑定到资源方法的已绑定过滤器，来操作响应header
13)服务器端WriterInterceptor执行，使用压缩包装原始输出流14)服务器端MessageBodyWriter执行，把java类型对象序列化到压缩输出流，然后发回到客户端
15)客户端收到响应，实体数据已被压缩16)客户端的ClientResponseFilter执行，来操作响应header
17)客户端从请求调用处获得Response类型的返回对象18)客户端response.readEntity()执行，从响应中抽取实体
19)客户端ReaderInterceptor执行，用解压缩包装原始输入流20)客户端MessageBodyReader执行，从解压缩输入流中反序列化出java类型对象
21)java类型对象从readEntity方法中返回

整体执行顺序，先执行过滤器，再执行拦截器，然后执行序列化和反序列化器

客户端请求-过滤器-拦截器-序列化器-服务器端接收请求-匹配前过滤器-资源方法匹配-匹配后过滤器-拦截器-反序列化器-
资源方法执行返回响应-过滤器-拦截器-序列化器-客户端收到响应-过滤器-拦截器-反序列化器

拦截器只有在实体出现时才会执行，序列化器和反序列化器也是这样的。拦截器先执行，对输入输出流进行包装，然后序列化器和反序列化器再执行。
拦截器一般执行一次，反序列化器可以从内部缓冲区中读取数据而可以执行多次

过滤器和拦截器可以名称绑定，就是特定的过滤器和拦截器只能用于特定的资源方法。过滤器和拦截器如果进行了这样的限制的话叫做名称绑定，
没有这样的限制的话叫做全局。 @NameBinding注解是一个元注解，用于定义其它用在provider和资源方法上的注解，provider和资源方法上的注解一样的时候才会执行，
注解也可以用在资源类上，等同于用在所有资源方法上。如果同时标注了多个注解，则provider和资源方法上的注解个数和类型必须完全一样才可以执行，
资源类上的注解和资源方法上的注解可以联合起来使用。全局provider总是执行，对于有注解的资源方法也照样执行

上面的绑定属于静态绑定，直接写死在源代码里，动态绑定是在应用初始化的时候定义绑定，来把provider应用于资源方法，
使用javax.ws.rs.container.DynamicFeature接口来动态注册provider，接口的configure方法对于应用中的每个资源方法执行一次，
ResourceInfo类型参数可以获取资源类和资源方法相关信息用来做条件判断，FeatureContext类型参数用来注册provider，
这种方式注册的provider并不影响其它方式的provider

多个过滤器和拦截器的执行顺序通过@javax.annotation.Priority注解来确定，和处理请求相关的过滤器和拦截器按升序执行，
和处理响应相关的过滤器和拦截器按降序执行。javax.ws.rs.Priorities类定义了标准化的用于不同目的的优先级常量值

Chapter 11. Asynchronous Services and Clients

默认服务器端对客户端的请求是同步处理的，从服务器端IO容器中拿出一个线程处理客户端的一个连接请求，一旦线程返回IO容器，则认为请求处理完毕，连接以及相关资源就可以释放了。这种模式对于资源方法执行时间相对短的请求足够了。如果一个资源方法需要很长时间计算结果，这时服务器端应该使用异步处理模式。这种模式中，一个请求处理线程和客户端连接之间的关联被打破，这时处理请求的线程返回IO容器时不能再认为客户端的连接可以被关闭，这时需要暴露一个显式挂起、恢复和关闭客户端连接的设施，注意，使用服务器端异步处理模式并不会改进客户端感知的处理时间，然而它将增加服务器端的吞吐量，通过释放初始请求处理线程返回到IO容器，此时请求可能仍然在队列中等待被处理或请求正在另一个专用线程中被处理。释放回IO容器中的那个线程可以用来处理新进来的请求

使用@Suspended注解可以注入一个AsyncResponse类型的对象，同时也说明方法将以异步模式执行，通过把AsyncResponse参数传进资源方法来假定资源方法将以异步模式被调用，表明在资源方法返回时客户端连接不应被底层的IO容器自动关闭，相反，注入进来的AsyncResponse（表示挂起的客户端请求连接）对象将使用其它线程显式地发送响应回客户端。换句话说，资源方法执行完时响应还没有准备好，处理必须被挂起，一旦响应准备好时再使用响应来显式恢复，注意异步方法通常返回void，资源方法开启一个新线程后退出。请求处理被挂起，容器线程返回到容器线程池可以去处理其它请求，资源方法里启动的新线程来处理耗时的操作，一旦有结果后将使用resume方法恢复，恢复的响应在一个新的线程里以和其它同步响应相同的方式被处理，包括执行过滤器，拦截器等把响应发回客户端。异步响应不需要在从资源方法里启动的那个线程里恢复，异步响应甚至能从其它的请求处理线程中恢复，第一个请求过来后异步响应挂起并保存在静态字段里，第二个请求过来后，静态字段里挂起的响应从第二个请求线程恢复，挂起的异步响应通过静态字段在两个请求之间传递

挂起异步响应的恢复一般基于一个事件，如果这个事件不发生的话，永远无法恢复，此时可以用异步超时时间解决，setTimeoutHandler和setTimeout用来设置超时处理器和超时时间，如果只设置超时时间而不设置超时处理器的话，当超时时jersey默认抛出ServiceUnavailableException，映射成503，Service Unavailable

可以注册异步服务器端回调，这些回调基于挂起的异步响应状态的改变而被调用，可以注册两个回调，CompletionCallback接口，在请求完成或失败时执行，具体当响应被写入客户端后执行，ConnectionCallback接口，当到客户端的连接关闭或丢失时执行，由于时间过长客户端终止连接时，服务器端响应还没有恢复或还没有完全写入客户端，这时会执行，如果响应已经成功地被写入客户端，则不会执行

分块输出，可以把响应分成多个独立的块分别发送给客户端，当服务器端一个块形成后立即发给客户端而不用等下一个块，响应实体在块里被发送，客户端知道响应将要被分块，所以单独读取每个响应块，并处理它，继续在同一个连接上等待更多的块到来，当服务器发送完所有块后可以关闭连接，从资源方法返回ChunkedOutput对象表明响应是分块输出的，且是异步执行的，可以从不同的线程里使用该ChunkedOutput对象往客户端写分块数据，全部写完后要显式调用关闭。ChunkedOutput对象可以在不同的请求线程间传递，一个请求返回ChunkedOutput对象，另一个请求使用该ChunkedOutput对象往客户端写数据

客户端API也支持异步处理，返回一个Future<Response>对象，使用AsyncInvoker对象进行调用。客户端也可以注册异步回调，使用InvocationCallback<RESPONSE>接口，completed方法当调用成功完成时执行，响应会被传进来， failed在调用失败时执行，异常会被传进来，当泛型类型是Response时，failed只在由于客户端处理错误而引起的调用失败时才执行，当泛型类型是其它时，只要服务器端返回的不是2xx，failed就会执行，因为此时客户端无法获取服务器端返回的错误码信息。泛型可以直接设置成期望的java类型

服务器端可以分块输出，客户端使用ChunkedInput<T>来实现分块输入，使用GenericEntity<T>类型来保存泛型信息，在运行时使用，因为java的泛型在运行时会被擦除。服务器端发完关闭连接后，客户端会收到null表明没有了。客户端在以字节流的形式读取块数据时，无法分辨出块的边界，为了实现自定义边界，可以注册ChunkParser，用来读取块，并区分它们，jersey已经提供了几种实现，自己也可以实现，默认是以出现\r\n作为分隔符的。进来的数据现有ChunkParser读取，然后再由MessageBodyReader<T>转化为java对象，可以给chunk定义媒体类型来选择合适的MessageBodyReader<T>完成反序列化

Chapter 14. Programmatic API for Building Resources

通常资源类和资源方法都是已经写好的静态内容，还可以以编程的方式在运行时动态模拟构建资源类和资源方法来响应客户端的请求


